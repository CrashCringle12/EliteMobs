package com.magmaguy.elitemobs.combatsystem.antiexploit;

import com.magmaguy.elitemobs.api.EliteMobDamagedByPlayerAntiExploitEvent;
import com.magmaguy.elitemobs.config.AntiExploitConfig;
import com.magmaguy.elitemobs.mobconstructor.EliteMobEntity;
import com.magmaguy.elitemobs.utils.DebugBlockLocation;
import com.magmaguy.elitemobs.utils.NonSolidBlockTypes;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.util.Vector;

public class PreventLargeDarkroomExploit implements Listener {

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onEntityDamage(EliteMobDamagedByPlayerAntiExploitEvent event) {
        if (event.isCancelled()) return;
        antiHopper(event);
        if (!event.getEliteMobEntity().getLivingEntity().getWorld().equals(event.getEliteMobDamagedByPlayerEvent().getPlayer().getWorld()))
            return;

        Vector ray = event.getEliteMobDamagedByPlayerEvent().getPlayer().getLocation().clone().subtract(event.getEliteMobEntity().getLivingEntity().getLocation()).toVector();
        ray.normalize();
        boolean playerIsBelow = ray.getY() < 0;
        boolean playerIsAbove = ray.getY() > 0;
        ray.setY(0);
        ray.multiply(0.5);
        Location rayTraceLocation = event.getEliteMobEntity().getLivingEntity().getLocation().clone();
        Location eyeLevelBlockLocation, floorBlockLocation, previousFloorBlockLocation = null;
        boolean isSlope = false;

        for (int i = 0; i < 35; i++) {
            if (event.getEliteMobEntity().getLivingEntity().getLocation().distanceSquared(event.getEliteMobDamagedByPlayerEvent().getPlayer().getLocation()) <
                    event.getEliteMobEntity().getLivingEntity().getLocation().distanceSquared(rayTraceLocation))
                return;
            rayTraceLocation.add(ray);
            eyeLevelBlockLocation = rayTraceLocation.clone().add(new Vector(0, 1, 0));
            floorBlockLocation = rayTraceLocation.clone().subtract(new Vector(0, 1, 0));

            if (!NonSolidBlockTypes.isPassthrough(rayTraceLocation.getBlock().getType()) ||
                    !NonSolidBlockTypes.isPassthrough(eyeLevelBlockLocation.getBlock().getType())) {

                if (!isSlope) {
                    isSlope = checkSlope(rayTraceLocation.clone(), eyeLevelBlockLocation.clone(), floorBlockLocation.clone(),
                            event.getEliteMobDamagedByPlayerEvent().getPlayer().getLocation().getY() - event.getEntity().getLocation().getBlockY());
                    if (!isSlope)
                        if (solidWall(rayTraceLocation, eyeLevelBlockLocation, event.getEliteMobEntity())) {
                            event.setTriggered(true);
                            return;
                        }
                }

                if (playerIsBelow)
                    if (previousFloorBlockLocation != null)
                        if (antiShortStairs(rayTraceLocation, floorBlockLocation, previousFloorBlockLocation)) {
                            event.getEliteMobEntity().incrementAntiExploit(11, "largeDarkroomAntiexploit3");
                            event.setTriggered(true);
                            return;
                        }

                break;

            }

            previousFloorBlockLocation = floorBlockLocation.clone();

            //new DebugBlockLocation(rayTraceLocation);
            //new DebugBlockLocation(eyeLevelBlockLocation);
            //new DebugBlockLocation(floorBlockLocation);
        }

    }

    private void antiHopper(EliteMobDamagedByPlayerAntiExploitEvent event) {
        if (!AntiExploitConfig.largeDarkroomAntiexploit1) return;
        if (event.getEliteMobEntity().getLivingEntity().getLocation().clone().subtract(new Vector(0, 1, 0)).getBlock().getType().equals(Material.HOPPER) ||
                event.getEliteMobEntity().getLivingEntity().getLocation().clone().subtract(new Vector(0, 1, 0)).getBlock().getType().equals(Material.HOPPER)) {
            event.getEliteMobEntity().incrementAntiExploit(5, "largeRoomAntiExploit1");
            event.setTriggered(true);
        }
    }

    /*
    Looks if there's 2 solid blocks (player height) between the player and the entity
     */
    private boolean solidWall(Location footLevel, Location eyeLevel, EliteMobEntity eliteMobEntity) {
        if (!AntiExploitConfig.largeDarkroomAntiexploit2) return false;
        if (!footLevel.getBlock().isPassable() && !eyeLevel.getBlock().isPassable()) {
            eliteMobEntity.incrementAntiExploit(3, "largeDarkroomAntiexploit2 (wall)");
            return true;
        }
        if (footLevel.getBlock().isPassable() && !eyeLevel.getBlock().isPassable()) {
            eliteMobEntity.incrementAntiExploit(3, "largeDarkroomAntiexploit2 (window1)");
            return true;
        }
        if (!footLevel.getBlock().isPassable() && eyeLevel.getBlock().isPassable() && !eyeLevel.clone().add(new Vector(0, 1, 0)).getBlock().isPassable()) {
            eliteMobEntity.incrementAntiExploit(3, "largeDarkroomAntiexploit2 (window2)");
            return true;
        }
        return false;
    }

    private boolean checkSlope(Location footLevel, Location eyeLevel, Location floorBlockLocation, double heightOffset) {
        //Positive height offset: player is higher
        //Negative height offset: elite is higher
        //Equal height offset: player and elite are on the same level
        if (heightOffset == 0)
            return false;
        if (heightOffset > 0)
            return !footLevel.getBlock().isPassable() && eyeLevel.getBlock().isPassable() && eyeLevel.clone().add(new Vector(0, 1, 0)).getBlock().isPassable();
        return floorBlockLocation.getBlock().isPassable() && footLevel.getBlock().isPassable() && eyeLevel.getBlock().isPassable();
    }

    private boolean antiShortStairs(Location footLevel, Location floorLevel, Location previousFloorLevel) {
        if (!AntiExploitConfig.largeDarkroomAntiexploit3) return false;
        return !NonSolidBlockTypes.isPassthrough(footLevel.getBlock().getType()) ||
                !NonSolidBlockTypes.isPassthrough(floorLevel.getBlock().getType()) ||
                !NonSolidBlockTypes.isPassthrough(previousFloorLevel.getBlock().getType());
    }

}
